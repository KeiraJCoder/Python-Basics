import time

name = "Keira"

print ("Hello " + name)

print (type(name)) #check data type


first_name = "Keira "

last_name = "Jarvis"

full_name = first_name + last_name

print ("Hello "+ full_name)


age = 21

age = age + 1
print(age)

age += 1
print (age)

print ("Your age is : " +str(age)) #stringcast


height = 250.5
print (height)

print (type(height))

print ("Your height is: " +str (height) +"cm")


human = False

print ("Are you a human: "+str (human))

print(type(human))


name = "Keira"

age = 21

attractive = False


name, age, attractive = "Keira", 21, False
print name 


Spongebob = 30

Patrick = 30

Sandy = 30

Squidward = 30


Spongebob = Patrick = Sandy = Squidward = 30

print (Spongebob)


name = "Keira"
print (len(name))

print (name.find("K"))

print (name.capitalize())

print (name.upper())

print (name.lower())

print (name.isdigit())

print (name.isalpha())

print (name.count("a"))

print (name.replace("a", "o"))

print (name*3)


type casting


x = 1
y = 2.0
z = "3"

x = str(x)
y = str(y)
z = str(z)

print("x is "+str(x))
print("y is "+str(y))
print(z*3)

name = input("What is your name?: ")
age = int(input("How old are you?: ")) #if you are dealing with numbers, convert input to integer
height = float(input("How tall are you?: "))

print ("Hello "+name)
print ("You are "+str(age)+ " years old")
print ("You are "+str(height)+"cm tall")

maths

import math

pi = 3.14
x = 1
y = 2
z = 3

print(round(pi)) #round to nearest full integer
print (math.ceil(pi)) #round up to nearest whole integer
print (math.floor(pi)) #round down to nearest whole integer
print(abs(pi)) #absolute value function (how close to 0 are you)
print (pow(pi,2)) #raise pi to the power of 2
print(math.sqrt(pi)) #square root 
print (max(x,y,z))
print (min(x,y,z))

Slicing

slicing = create a substring by extracting elements from another string
indexing [] or slice()
[start:stop:step]

name = "Keira Jarvis"
first_name = name[:5] #0 to 5
last_name = name[6:] #from 6 until the end
funky_name = name[::3] #print every other letter 
reversed_name = name [::-1]

print (first_name)
print (last_name)
print (funky_name)
print (reversed_name)


website1 = "http://google.com"
website2 = "http://wikpiedia.com" #negative index starts with -1
website3 = "http://facebook.com"

slice = slice(7,-4)

print(website1[slice])
print(website2[slice])
print (website3[slice])

if statements, elif and else statements

age = int(input("How old are you? "))

if age == 100:
    print ("You are a fossil")
elif age >= 18:
    print ("You are an adult")
elif age < 1 : 
    print ("You haven't even been born yet!")
else:
    print ("You aren't old enough")



logical operators (and/or) two or more conditional statements

temp = int(input("What is the temperature ourside: "))
if not (temp >= 0 and temp <=30):
    print ("The temperature is bad today")
    print ("Wrap up warm")
elif not (temp < 0 or temp > 30):
    print ("The temperature is good today")
    print ("Go outside")



while loop, a statement that will execute its block of code, as long as its condition remains true

name = ""

while len(name) == 0: #while the length of name is equal to zero 
    name = input("Enter your name: ") #ask the user to enter their name
    
print ("Hello " +name)



for loop = a statement that will execute its code a limited number of times
while loop = unlimited
for loop = limited

for i in range (11):
    print (i)

for i in range (50,101,2): #start:stop:step
    print (i)

for i in "Keira Jarvis":
    print (i) #each letter in the string

for seconds in range (10,0,-1):
    print (seconds)
    time.sleep(1)
print ("Happy New Year!")

nested loops
a general concept of having 1 loop inside of another loop
"inner loop" will finish all of its iterations before finishing one iteration of the "outer loop"

rows = int(input("How many rows?: ")) #height
columns = int(input("How many columns? ")) #width
symbol = input("Enter a symbol to use: ")

#outer loop
for i in range(rows):
    for j  in range (columns):                       #j inner loop index
        print(symbol, end="") #stops cursor moving down
    print ()



loop control statements = change loops execution from its normal sequence

break = used to terminate the loop
continue = skips to next iteration of loop
pass = does nothing, acts as placeholder

while True:
    name = input("Enter your name: ")
    if name !="": #if its not equal to
        break

phone_number = "123-456-7890"

for i in phone_number:
    if i == "-":
        continue
    print (i, end="")

for i in range (1,21):
    if i == 13:
        pass
    else:
        print (i)

list = used multiple items within a single variable

food = ["pizza", "hamburgers", "hotdog", "spaghetti", "pudding"]

food.append("ice cream")
food.remove("hotdog")
food.pop()
food.insert(0,"cake")
food.sort()
# food.clear()

for x in food:
#prints all elements found within list of food
    print(x)

favourite_drinks = ["Coke", "Pepsi", "Monster"]

for x in favourite_drinks: #drink is interchangeable for x, plaecholder
    print (x)

2d lists = multidementional list

drinks = ["coffee", "soda", "tea"]
dinner = ["Pizza", "hamburger", "hotdog"]
dessert = ["cake", "ice cream"]

food = [drinks, dinner, dessert]
print (food[0][2]) #[] = index

tuple = collection which is ordered and unchangeable used to group together related data

student = ("Keira", 21, "female")

# print (student.count("Keira"))
# print (student.index("female"))

for x in student:
    print (x)

if "Keira" in student:
    print ("Keira is here")

set = collection which is unordered, unindexed. No duplicate values

utensils = {"fork", "spoon", "knife", "knife", "knife"}

dishes = {"bowl", "plate", "cup", "knife"}

utensils.add("napkin")
utensils.remove("fork")
utensils.clear()
utensils.update(dishes)
dinner_table = utensils.union(dishes)

print (utensils.difference(dishes))
print (utensils.intersection(dishes))

for x in dinner_table:
    print (x)

dictionary = a changeable, unordered collection of unique:value pairs
fast because they use hashing, allowing us to access a value quickly

capitals = {"USA":"Washington DC", #first is keys, 2nd is values
"India":"New Delhi",
"China":"Beijing",
"Russia":"Moscow"}

capitals.update({"Germany":"Berlin"})
capitals.update({"USA":"Las Vegas"})
capitals.pop("China") #removbes defined key
capitals.clear()


print (capitals["Russia"])

print(capitals.get("Germany")) #safer way to check a key (is Germany in dictionary?)

print (capitals.keys())
print (capitals.values())
print (capitals.items()) #prints entire dictionary

for key,value in capitals.items():
    print (key, value)

index operator [] = gives access to a sequences elements (str,list,tuples)

name = "keira Jarvis"
# if (name[0].islower()):
#     name = name.capitalize() #if name at index 0 

first_name = name[:5].upper()
last_name = name[6:].lower()
last_char = name[-1]

print (first_name)
print (last_name)
print (last_char)

function = a block of code which is executer ONLY when it is called

def hello (first_name, last_name):
    print ("hello " +first_name  +last_name)
    print ("Have a nice day")

hello("Keira", "Jarvis")

def fluff_purple():
    global total_points
    reply_ok = False
    while reply_ok == False:
        choice = input("\nAs you go down the stairs you find a door ahead of you, it has a mythical creature carved into it. Do you go through the door? (yes/no)\n")
        if choice.lower() == 'yes':
            total_points += 100
            reply_ok = True
            sprint("\nYou push open the door slowly and step into the gloom.\n") 
            sprint("\nSuddenly; torches in alcoves around the room blast into eye searing light, and before you stands a mighty Sphinx\n")
            sprint("\nHe looks at you ponderously for a while before he starts to speak. He asks you a riddle\n")
            sprint("\nWhat walks on four legs in the morning, two legs in the afternoon and three legs at night?")
            if input == ("man"):
                sprint ("You may pass")
            else:
                sprint ("You displease me human. Return from whence you came")
            end_game()
        elif choice.lower() == 'no':
            total_points = 50
            reply_ok = True
            sprint('\nYou return from where you came\n')
            third_pink()
        else:
            sprint("Make your choice. Or risk displeasing me.")
from random import randint

def random_roll(minpoint,maxpoint):
    return randint(minpoint,maxpoint) # returns a random integer between minpoint and maxpoint


def second_pink():
    global total_points

roll = random_roll(0,9)
print("""
Try the door.\n""")
if roll>-1 and roll<5: # if the number is between 0 and 4
        total_points += 100
        sprint('Its open!\n')
        sprint("You enter the corridor beyond, there are only two options open to you.\n")
        sprint("\nTurn right or left? (right/left)\n")
        reply_ok = False
while reply_ok == False:    
        option = input()
        if option.lower() == "right":
            total_points += 100
            reply_ok = True
            path_options.append("c" + option) # add the option to our list
            first_purple()
        elif option.lower() == "left":
            total_points += 200
            reply_ok = True
            path_options.append("c" + option) # add the option to our list
            third_pink()
        elif roll >-5 and roll<9:
            sprint ("Its locked\n")
        else:
            sprint("Please choose your path. (right/left)\n")
else:
    total_points -= 100
    last_red()
